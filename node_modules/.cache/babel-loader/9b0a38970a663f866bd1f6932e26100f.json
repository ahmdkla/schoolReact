{"ast":null,"code":"var _jsxFileName = \"/home/sky4cr/Documents/wellpact/Nana/react-front/src/components/UserPost.js\";\nimport React, { Component } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Swal from \"sweetalert2\";\nconst API_STRING = process.env.REACT_APP_API_PLACEHOLDER;\nexport class UserPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      const userId = this.props.match.params.userId;\n      this.setState({\n        id: userId\n      });\n      axios.get(API_STRING + \"/users/\" + {\n        userId\n      } + \"/posts\").then(res => {\n        let userPosted = res.data.filter(item => {\n          return item.userId.toString() === userId.toString();\n        });\n        this.setState({\n          data: userPosted\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.onEdit = async (ID, index) => {\n      Swal.mixin({\n        input: \"text\",\n        confirmButtonText: \"Next &rarr;\",\n        showCancelButton: true,\n        progressSteps: [\"1\", \"2\"],\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to write something!\";\n          }\n        }\n      }).queue([\"Edit Title\", \"Edit Body\"]).then(result => {\n        if (result.value) {\n          axios.put(\"\".concat(API_STRING, \"/posts/\").concat(ID), {\n            title: result.value[0],\n            body: result.value[1]\n          }).then(response => {\n            if (response.status === 200) {\n              Swal.fire({\n                icon: \"success\",\n                title: \"Your post with id \" + ID + \"updated\",\n                text: \"title: \" + response.data.title + \"body: \" + response.data.body\n              });\n            }\n\n            let rest = this.state.data;\n            rest.splice(index, 1, {\n              title: result.value[0],\n              body: result.value[1]\n            });\n            this.setState({\n              data: rest\n            });\n          }).catch(error => {\n            console.log(error);\n          });\n        }\n      });\n    };\n\n    this.onDelete = (ID, index) => {\n      axios.delete(\"\".concat(API_STRING, \"/posts/\").concat(ID)).then(res => {\n        if (res.status === 200) {\n          Swal.fire({\n            title: \"Are you sure?\",\n            icon: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#3085d6\",\n            cancelButtonColor: \"#d33\",\n            confirmButtonText: \"Yes, delete it!\"\n          }).then(result => {\n            if (result.value) {\n              Swal.fire(\"Deleted!\", \"Your post with id: \".concat(ID, \" is deleted.\"), \"success\");\n              let refresh = this.state.data;\n              refresh.splice(index, 1);\n              this.setState({\n                data: refresh\n              });\n            }\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.addPost = () => {\n      Swal.mixin({\n        input: \"text\",\n        confirmButtonText: \"Next &rarr;\",\n        showCancelButton: true,\n        progressSteps: [\"1\", \"2\"],\n        inputValidator: value => {\n          if (!value) {\n            return \"You need to write something!\";\n          }\n        }\n      }).queue([\"Add Title\", \"Add Body\"]).then(result => {\n        if (result.value) {\n          axios.post(\"\".concat(API_STRING, \"/posts\"), {\n            title: result.value[0],\n            body: result.value[1]\n          }).then(response => {\n            if (response.status === 201) {\n              Swal.fire({\n                icon: \"success\",\n                title: \"Your new post is successfully added\",\n                text: \"Title: \" + response.data.title + \" Body: \" + response.data.body\n              });\n              let rest = this.state.data;\n              rest.push({\n                id: rest.lenth + 1,\n                title: result.value[0],\n                body: result.value[1]\n              });\n              this.setState({\n                data: rest\n              });\n            }\n          });\n        }\n      });\n    };\n\n    this.state = {\n      data: [],\n      id: \"\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => {\n        this.addPost();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Add New Post\"), this.state.data.length > 0 && this.state.data.map((item, key) => {\n      return React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(ListItem, {\n        alignItems: \"flex-start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(ListItemText, {\n        primary: item.userId,\n        secondary: React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"h4\",\n          color: \"textPrimary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, item.title, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        })), React.createElement(Typography, {\n          variant: \"h6\",\n          color: \"textSecondary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, item.body, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        margin: \"props\",\n        style: {\n          margin: \"50px\"\n        },\n        onClick: () => {\n          this.onEdit(item.id, key);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Edit\"), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        style: {\n          margin: \"50px\"\n        },\n        onClick: () => {\n          this.onDelete(item.id, key);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"Delete\")));\n    }));\n  }\n\n}\nexport default withRouter(UserPost);","map":{"version":3,"sources":["/home/sky4cr/Documents/wellpact/Nana/react-front/src/components/UserPost.js"],"names":["React","Component","List","ListItem","ListItemText","Typography","axios","withRouter","Button","Swal","API_STRING","process","env","REACT_APP_API_PLACEHOLDER","UserPost","constructor","props","componentDidMount","userId","match","params","setState","id","get","then","res","userPosted","data","filter","item","toString","catch","error","console","log","onEdit","ID","index","mixin","input","confirmButtonText","showCancelButton","progressSteps","inputValidator","value","queue","result","put","title","body","response","status","fire","icon","text","rest","state","splice","onDelete","delete","confirmButtonColor","cancelButtonColor","refresh","addPost","post","push","lenth","render","length","map","key","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Swal from \"sweetalert2\";\n\nconst API_STRING = process.env.REACT_APP_API_PLACEHOLDER;\n\nexport class UserPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      id: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    const {\n      match: {\n        params: { userId }\n      }\n    } = this.props;\n\n    this.setState({ id: userId });\n\n    axios\n      .get(API_STRING + \"/users/\" + { userId } + \"/posts\")\n      .then(res => {\n        let userPosted = res.data.filter(item => {\n          return item.userId.toString() === userId.toString();\n        });\n        this.setState({ data: userPosted });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  onEdit = async (ID, index) => {\n    Swal.mixin({\n      input: \"text\",\n      confirmButtonText: \"Next &rarr;\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\"],\n      inputValidator: value => {\n        if (!value) {\n          return \"You need to write something!\";\n        }\n      }\n    })\n      .queue([\"Edit Title\", \"Edit Body\"])\n      .then(result => {\n        if (result.value) {\n          axios\n            .put(`${API_STRING}/posts/${ID}`, {\n              title: result.value[0],\n              body: result.value[1]\n            })\n            .then(response => {\n              if (response.status === 200) {\n                Swal.fire({\n                  icon: \"success\",\n                  title: \"Your post with id \" + ID + \"updated\",\n                  text:\n                    \"title: \" +\n                    response.data.title +\n                    \"body: \" +\n                    response.data.body\n                });\n              }\n\n              let rest = this.state.data;\n\n              rest.splice(index, 1, {\n                title: result.value[0],\n                body: result.value[1]\n              });\n\n              this.setState({ data: rest });\n            })\n            .catch(error => {\n              console.log(error);\n            });\n        }\n      });\n  };\n\n  onDelete = (ID, index) => {\n    axios\n      .delete(`${API_STRING}/posts/${ID}`)\n      .then(res => {\n        if (res.status === 200) {\n          Swal.fire({\n            title: \"Are you sure?\",\n            icon: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#3085d6\",\n            cancelButtonColor: \"#d33\",\n            confirmButtonText: \"Yes, delete it!\"\n          }).then(result => {\n            if (result.value) {\n              Swal.fire(\n                \"Deleted!\",\n                `Your post with id: ${ID} is deleted.`,\n                \"success\"\n              );\n              let refresh = this.state.data;\n              refresh.splice(index, 1);\n              this.setState({\n                data: refresh\n              });\n            }\n          });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  addPost = () => {\n    Swal.mixin({\n      input: \"text\",\n      confirmButtonText: \"Next &rarr;\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\"],\n      inputValidator: value => {\n        if (!value) {\n          return \"You need to write something!\";\n        }\n      }\n    })\n      .queue([\"Add Title\", \"Add Body\"])\n      .then(result => {\n        if (result.value) {\n          axios\n            .post(`${API_STRING}/posts`, {\n              title: result.value[0],\n              body: result.value[1]\n            })\n            .then(response => {\n              if (response.status === 201) {\n                Swal.fire({\n                  icon: \"success\",\n                  title: \"Your new post is successfully added\",\n                  text:\n                    \"Title: \" +\n                    response.data.title +\n                    \" Body: \" +\n                    response.data.body\n                });\n                let rest = this.state.data;\n\n                rest.push({\n                  id: rest.lenth + 1,\n                  title: result.value[0],\n                  body: result.value[1]\n                });\n\n                this.setState({ data: rest });\n              }\n            });\n        }\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <Button\n          onClick={() => {\n            this.addPost();\n          }}\n        >\n          Add New Post\n        </Button>\n        {this.state.data.length > 0 &&\n          this.state.data.map((item, key) => {\n            return (\n              <List>\n                <ListItem alignItems=\"flex-start\">\n                  <ListItemText\n                    primary={item.userId}\n                    secondary={\n                      <React.Fragment>\n                        <Typography variant=\"h4\" color=\"textPrimary\">\n                          {item.title}\n                          <br />\n                        </Typography>\n                        <Typography variant=\"h6\" color=\"textSecondary\">\n                          {item.body}\n                          <br />\n                        </Typography>\n                      </React.Fragment>\n                    }\n                  />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    margin=\"props\"\n                    style={{ margin: \"50px\" }}\n                    onClick={() => {\n                      this.onEdit(item.id, key);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ margin: \"50px\" }}\n                    onClick={() => {\n                      this.onDelete(item.id, key);\n                    }}\n                  >\n                    Delete\n                  </Button>\n                </ListItem>\n              </List>\n            );\n          })}\n      </div>\n    );\n  }\n}\nexport default withRouter(UserPost);\n"]},"metadata":{},"sourceType":"module"}